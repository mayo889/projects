DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(50) NOT NULL UNIQUE,
  phone VARCHAR(50) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS profiles;
CREATE TABLE profiles (
  user_id INT UNSIGNED NOT NULL UNIQUE PRIMARY KEY,
  photo_id INT UNSIGNED COMMENT'Ссылается на таблицу media',
  gender ENUM('M', 'F') NOT NULL,
  birthday_at DATE,
  city VARCHAR(50),
  country VARCHAR(50),
  about TEXT,
  social_network VARCHAR(50),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS movies;
CREATE TABLE movies (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  raiting FLOAT NOT NULL DEFAULT 0,
  number_of_views INT UNSIGNED NOT NULL DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS about_movies;
CREATE TABLE about_movies (
  movie_id INT UNSIGNED NOT NULL UNIQUE PRIMARY KEY,
  movie_description TEXT,
  genre_id TINYINT UNSIGNED,
  poster_id INT UNSIGNED UNIQUE COMMENT'Ссылается на таблицу media',
  trailer_id INT UNSIGNED UNIQUE COMMENT'Ссылается на таблицу media',
  age_limit ENUM('0+', '6+', '12+', '16+', '18+') NOT NULL,
  production_year DATE NOT NULL,
  country VARCHAR(50) NOT NULL,
  budget BIGINT NOT NULL,
  box_office BIGINT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

DROP TABLE IF EXISTS genres;
CREATE TABLE genres (
  id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  genre VARCHAR(30) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS reviews;
CREATE TABLE reviews (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  movie_id INT UNSIGNED NOT NULL,
  review MEDIUMTEXT NOT NULL DEFAULT 0,
  raiting INT NOT NULL DEFAULT 0 COMMENT 'Сумма оценок (-1 и 1). Может быть отрицательной',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS comments;
CREATE TABLE comments (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  review_id INT UNSIGNED NOT NULL,
  comment TEXT NOT NULL,
  raiting INT NOT NULL DEFAULT 0 COMMENT 'Сумма оценок (-1 и 1). Может быть отрицательной',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
) COMMENT 'Комментарии к рецензиям';

DROP TABLE IF EXISTS stars;
CREATE TABLE stars (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  photo_id INT UNSIGNED COMMENT 'Ссылается на таблицу media',
  gender ENUM('M', 'F') NOT NULL,
  profession_id TINYINT UNSIGNED NOT NULL,
  raiting FLOAT NOT NULL DEFAULT 0 COMMENT 'Усредненная оценка по фильмам, в создании которых принимал участие',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS professions;
CREATE TABLE professions (
  id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  profession VARCHAR(15) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS stars_movies;
CREATE TABLE stars_movies (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  star_id INT UNSIGNED NOT NULL,
  movie_id INT UNSIGNED NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS raitings;
CREATE TABLE raitings (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type_id TINYINT UNSIGNED NOT NULL,
  raiting INT NOT NULL COMMENT 'Оценка фильма (от 0 до 10) или рецензии или комментария к рецензии (-1 или 1)',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS target_types;
CREATE TABLE target_types (
  id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(20) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS friendship;
CREATE TABLE friendship (
  user_id INT UNSIGNED NOT NULL,
  friend_id INT UNSIGNED NOT NULL,
  status ENUM('confirmed', 'subscription') COMMENT 'Если получатель отклонил приглашение, то отправитель является подписчиком получателя',
  confirmed_at DATETIME,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, friend_id)
);

DROP TABLE IF EXISTS media;
CREATE TABLE media (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  filename VARCHAR(255) NOT NULL,
  size INT UNSIGNED NOT NULL,
  metadata JSON,
  media_type_id TINYINT UNSIGNED NOT NULL,
  created_at datetime DEFAULT CURRENT_TIMESTAMP,
  updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS media_types;
CREATE TABLE media_types (
  id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  created_at datetime DEFAULT CURRENT_TIMESTAMP,
  updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
